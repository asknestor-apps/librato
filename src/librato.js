// Generated by CoffeeScript 1.10.0
(function() {
  var createSnapshot, getGraphForIntrument, getSnapshot, parseTimePeriod, processIntrumentResponse;

  parseTimePeriod = function(time) {
    var amount, matchData;
    matchData = /(\d+)?\s*(second|minute|hour|day|week)s?/.exec(time);
    if (!matchData[2]) {
      return;
    }
    amount = matchData[1] ? parseInt(matchData, 10) : 1;
    return amount * (function() {
      switch (matchData[2]) {
        case 'second':
          return 1;
        case 'minute':
          return 60;
        case 'hour':
          return 60 * 60;
        case 'day':
          return 60 * 60 * 24;
        case 'week':
          return 60 * 60 * 24 * 7;
      }
    })();
  };

  getSnapshot = function(url, msg, robot) {
    var auth, pass, user;
    user = process.env.HUBOT_LIBRATO_USER;
    pass = process.env.HUBOT_LIBRATO_TOKEN;
    auth = 'Basic ' + new Buffer(user + ':' + pass).toString('base64');
    return robot.http(url).headers({
      Authorization: auth,
      Accept: 'application/json'
    }).get()(function(err, res, body) {
      var json;
      switch (res.statusCode) {
        case 200:
          json = JSON.parse(body);
          if (json['image_href']) {
            return msg.reply(json['image_href']);
          } else {
            return setTimeout((function() {
              return getSnapshot(url, msg, robot);
            }), 100);
          }
          break;
        case 204:
          return setTimeout((function() {
            return getSnapshot(url, msg, robot);
          }), 100);
        default:
          return msg.reply("Unable to get snap shot from librato :(\nStatus Code: " + res.statusCode + "\nBody:\n\n" + body);
      }
    });
  };

  createSnapshot = function(inst, source, time, msg, robot) {
    var auth, data, pass, url, user;
    url = "https://metrics-api.librato.com/v1/snapshots";
    data = JSON.stringify({
      subject: {
        instrument: {
          href: "https://metrics-api.librato.com/v1/instruments/" + inst.id,
          sources: [source]
        }
      },
      duration: time
    });
    user = process.env.HUBOT_LIBRATO_USER;
    pass = process.env.HUBOT_LIBRATO_TOKEN;
    auth = 'Basic ' + new Buffer(user + ':' + pass).toString('base64');
    return robot.http(url).headers({
      Authorization: auth,
      Accept: 'application/json',
      'Content-Type': 'application/json'
    }).post(data)(function(err, res, body) {
      var json;
      switch (res.statusCode) {
        case 201:
          json = JSON.parse(body);
          return msg.reply(json['image_href']);
        case 202:
          json = JSON.parse(body);
          return getSnapshot(json['href'], msg, robot);
        default:
          return msg.reply("Unable to create snap shot from librato :(\nStatus Code: " + res.statusCode + "\nBody:\n\n" + body);
      }
    });
  };

  getGraphForIntrument = function(inst, source, msg, timePeriod, robot) {
    var timePeriodInSeconds;
    timePeriodInSeconds = parseTimePeriod(timePeriod);
    if (!timePeriodInSeconds) {
      msg.reply("Sorry, I couldn't understand the time peroid " + timePeriod + ".\nTry something like '[<number> ]<second|minute|hour|day|week>s'");
      return;
    }
    return createSnapshot(inst, source, timePeriodInSeconds, msg, robot);
  };

  processIntrumentResponse = function(body, source, msg, timePeriod, robot) {
    var found, json, names;
    json = JSON.parse(body);
    found = json['query']['found'];
    if (found === 0) {
      return msg.reply("Sorry, couldn't find that graph!");
    } else if (found > 1) {
      names = json['instruments'].reduce(function(acc, inst) {
        return acc + "\n" + inst.name;
      });
      return msg.reply("I found " + found + " graphs named something like that. Which one did you mean?\n\n" + names);
    } else {
      return getGraphForIntrument(json['instruments'][0], source, msg, timePeriod, robot);
    }
  };

  module.exports = function(robot) {
    return robot.respond(/graph me ([\w\.:\- ]+?)\s*(?:over the (?:last|past)? )?(\d+ (?:second|minute|hour|day|week)s?)?(?: source (.+))?$/i, function(msg) {
      var auth, instrument, pass, source, timePeriod, user;
      instrument = msg.match[1];
      timePeriod = msg.match[2] || 'hour';
      source = msg.match[3] || '*';
      user = process.env.HUBOT_LIBRATO_USER;
      pass = process.env.HUBOT_LIBRATO_TOKEN;
      auth = 'Basic ' + new Buffer(user + ':' + pass).toString('base64');
      return robot.http("https://metrics-api.librato.com/v1/instruments?name=" + (escape(instrument))).headers({
        Authorization: auth,
        Accept: 'application/json'
      }).get()(function(err, res, body) {
        switch (res.statusCode) {
          case 200:
            return processIntrumentResponse(body, source, msg, timePeriod, robot);
          default:
            return msg.reply("Unable to get list of instruments from librato :(\nStatus Code: " + res.statusCode + "\nBody:\n\n" + body);
        }
      });
    });
  };

}).call(this);
